name: Deploy Foodgram

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci --legacy-peer-deps
        GENERATE_SOURCEMAP=false CI=false npm run build
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    
    - name: Deploy to server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
          if ! command -v docker &> /dev/null; then
            echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            rm get-docker.sh
          fi
          
          if ! command -v docker-compose &> /dev/null; then
            echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
          PROJECT_DIR="/home/${{ secrets.USERNAME }}/foodgram"
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
          if [ -d "/etc/letsencrypt" ]; then
            echo "üîí –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
            sudo cp -r /etc/letsencrypt /tmp/letsencrypt-backup
          fi
          
          # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
          sudo rm -rf $PROJECT_DIR
          mkdir -p $PROJECT_DIR
          cd $PROJECT_DIR
          
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
          git clone https://github.com/${{ github.repository }}.git .
          
          # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –±—ã–ª–∏
          if [ -d "/tmp/letsencrypt-backup" ]; then
            echo "üîí –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
            sudo cp -r /tmp/letsencrypt-backup/* /etc/letsencrypt/
            sudo rm -rf /tmp/letsencrypt-backup
          fi
          
          # –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          sudo chown -R ${{ secrets.USERNAME }}:${{ secrets.USERNAME }} $PROJECT_DIR
          
          cd infra
          
          # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=foodgrammm.3utilities.com,www.foodgrammm.3utilities.com,${{ secrets.DOMAIN_NAME }},www.${{ secrets.DOMAIN_NAME }},localhost,127.0.0.1,51.250.29.108" >> .env
          echo "DB_ENGINE=django.db.backends.postgresql" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> .env
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
          USE_SSL=false
          if [ -f "/etc/letsencrypt/live/foodgrammm.3utilities.com/fullchain.pem" ]; then
            echo "üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            sed -i 's/nginx.simple.conf/nginx.prod.conf/' docker-compose.prod.yml
            USE_SSL=true
          else
            echo "üåê SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            sed -i 's/nginx.prod.conf/nginx.simple.conf/' docker-compose.prod.yml
          fi
          
          # –û–±–Ω–æ–≤–ª—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –¥–æ–º–µ–Ω–æ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
          sed -i 's/your-domain.com/${{ secrets.DOMAIN_NAME }}/g' nginx.simple.conf
          if [ "$USE_SSL" = true ]; then
            sed -i 's/your-domain.com/${{ secrets.DOMAIN_NAME }}/g' nginx.prod.conf
          fi
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d --build
          
          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          sleep 30
          
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º backend –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞
          echo "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
          docker-compose -f docker-compose.prod.yml restart backend
          
          # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ backend
          echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend..."
          sleep 10
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate
          docker-compose -f docker-compose.prod.yml exec -T backend python manage.py collectstatic --noinput
          docker-compose -f docker-compose.prod.yml exec -T backend python manage.py load_ingredients_data
          docker-compose -f docker-compose.prod.yml exec -T backend python manage.py load_tags_data
          
          # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          docker-compose -f docker-compose.prod.yml exec -T backend python manage.py shell -c "
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(email='admin@foodgram.com').exists():
              User.objects.create_superuser('admin', 'admin@foodgram.com', 'admin123')
              print('–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: admin@foodgram.com / admin123')
          else:
              print('–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
          "
          
          # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
          docker system prune -f
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          docker-compose -f docker-compose.prod.yml ps
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ nginx –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
          if docker-compose -f docker-compose.prod.yml ps | grep -q "foodgram-proxy.*Up"; then
            echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
            
            if [ "$USE_SSL" = true ]; then
              echo "üîí –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://foodgrammm.3utilities.com"
              echo "üë§ –ê–¥–º–∏–Ω–∫–∞: https://foodgrammm.3utilities.com/admin/"
              echo "üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://foodgrammm.3utilities.com/api/docs/"
              echo "üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            else
              echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://foodgrammm.3utilities.com"
              echo "üë§ –ê–¥–º–∏–Ω–∫–∞: http://foodgrammm.3utilities.com/admin/"
              echo "üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://foodgrammm.3utilities.com/api/docs/"
              echo ""
              echo "‚ö†Ô∏è  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:"
              echo "   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–æ–º–µ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
              echo "   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo certbot --nginx -d foodgrammm.3utilities.com"
              echo "   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ HTTPS"
            fi
            
            echo ""
            echo "üë§ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
            echo "   –õ–æ–≥–∏–Ω: admin@foodgram.com"
            echo "   –ü–∞—Ä–æ–ª—å: admin123"
          else
            echo "‚ùå –û–®–ò–ë–ö–ê: Nginx –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!"
            echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs foodgram-proxy"
            exit 1
          fi
